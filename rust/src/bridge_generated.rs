#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_fit_width_impl(
    port_: MessagePort,
    path_str: impl Wire2Api<String> + UnwindSafe,
    compress_format: impl Wire2Api<Option<CompressFormat>> + UnwindSafe,
    max_width: impl Wire2Api<Option<i32>> + UnwindSafe,
    quality: impl Wire2Api<Option<u8>> + UnwindSafe,
    sampling_filter: impl Wire2Api<Option<FilterType>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
        WrapInfo {
            debug_name: "fit_width",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path_str = path_str.wire2api();
            let api_compress_format = compress_format.wire2api();
            let api_max_width = max_width.wire2api();
            let api_quality = quality.wire2api();
            let api_sampling_filter = sampling_filter.wire2api();
            move |task_callback| {
                fit_width(
                    api_path_str,
                    api_compress_format,
                    api_max_width,
                    api_quality,
                    api_sampling_filter,
                )
            }
        },
    )
}
fn wire_fit_height_impl(
    port_: MessagePort,
    path_str: impl Wire2Api<String> + UnwindSafe,
    compress_format: impl Wire2Api<Option<CompressFormat>> + UnwindSafe,
    max_height: impl Wire2Api<Option<i32>> + UnwindSafe,
    quality: impl Wire2Api<Option<u8>> + UnwindSafe,
    sampling_filter: impl Wire2Api<Option<FilterType>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
        WrapInfo {
            debug_name: "fit_height",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path_str = path_str.wire2api();
            let api_compress_format = compress_format.wire2api();
            let api_max_height = max_height.wire2api();
            let api_quality = quality.wire2api();
            let api_sampling_filter = sampling_filter.wire2api();
            move |task_callback| {
                fit_height(
                    api_path_str,
                    api_compress_format,
                    api_max_height,
                    api_quality,
                    api_sampling_filter,
                )
            }
        },
    )
}
fn wire_contain_impl(
    port_: MessagePort,
    path_str: impl Wire2Api<String> + UnwindSafe,
    compress_format: impl Wire2Api<Option<CompressFormat>> + UnwindSafe,
    max_width: impl Wire2Api<Option<i32>> + UnwindSafe,
    max_height: impl Wire2Api<Option<i32>> + UnwindSafe,
    quality: impl Wire2Api<Option<u8>> + UnwindSafe,
    sampling_filter: impl Wire2Api<Option<FilterType>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
        WrapInfo {
            debug_name: "contain",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path_str = path_str.wire2api();
            let api_compress_format = compress_format.wire2api();
            let api_max_width = max_width.wire2api();
            let api_max_height = max_height.wire2api();
            let api_quality = quality.wire2api();
            let api_sampling_filter = sampling_filter.wire2api();
            move |task_callback| {
                contain(
                    api_path_str,
                    api_compress_format,
                    api_max_width,
                    api_max_height,
                    api_quality,
                    api_sampling_filter,
                )
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<CompressFormat> for i32 {
    fn wire2api(self) -> CompressFormat {
        match self {
            0 => CompressFormat::Jpeg,
            1 => CompressFormat::WebP,
            _ => unreachable!("Invalid variant for CompressFormat: {}", self),
        }
    }
}
impl Wire2Api<FilterType> for i32 {
    fn wire2api(self) -> FilterType {
        match self {
            0 => FilterType::Nearest,
            1 => FilterType::Triangle,
            2 => FilterType::CatmullRom,
            3 => FilterType::Gaussian,
            4 => FilterType::Lanczos3,
            _ => unreachable!("Invalid variant for FilterType: {}", self),
        }
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
